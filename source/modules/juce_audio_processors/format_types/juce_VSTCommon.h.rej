--- modules/juce_audio_processors/format_types/juce_VSTCommon.h
+++ modules/juce_audio_processors/format_types/juce_VSTCommon.h
@@ -100,41 +100,41 @@ struct SpeakerMappings  : private AudioChannelSet // (inheritance only to give e
         return AudioChannelSet::discreteChannels (fallbackNumChannels);
     }
 
-    static AudioChannelSet vstArrangementTypeToChannelSet (const Vst2::VstSpeakerArrangement& arr)
+    static AudioChannelSet vstArrangementTypeToChannelSet (const Vst2::VstSpeakerConfiguration& arr)
     {
-        return vstArrangementTypeToChannelSet (arr.type, arr.numChannels);
+        return vstArrangementTypeToChannelSet (arr.type, arr.numberOfChannels);
     }
 
     static int32 channelSetToVstArrangementType (AudioChannelSet channels)
     {
-        if      (channels == AudioChannelSet::disabled())           return Vst2::kSpeakerArrEmpty;
-        else if (channels == AudioChannelSet::mono())               return Vst2::kSpeakerArrMono;
-        else if (channels == AudioChannelSet::stereo())             return Vst2::kSpeakerArrStereo;
-        else if (channels == AudioChannelSet::createLCR())          return Vst2::kSpeakerArr30Cine;
-        else if (channels == AudioChannelSet::createLRS())          return Vst2::kSpeakerArr30Music;
-        else if (channels == AudioChannelSet::createLCRS())         return Vst2::kSpeakerArr40Cine;
-        else if (channels == AudioChannelSet::create5point0())      return Vst2::kSpeakerArr50;
-        else if (channels == AudioChannelSet::create5point1())      return Vst2::kSpeakerArr51;
-        else if (channels == AudioChannelSet::create6point0())      return Vst2::kSpeakerArr60Cine;
-        else if (channels == AudioChannelSet::create6point1())      return Vst2::kSpeakerArr61Cine;
-        else if (channels == AudioChannelSet::create6point0Music()) return Vst2::kSpeakerArr60Music;
-        else if (channels == AudioChannelSet::create6point1Music()) return Vst2::kSpeakerArr61Music;
-        else if (channels == AudioChannelSet::create7point0())      return Vst2::kSpeakerArr70Music;
-        else if (channels == AudioChannelSet::create7point0SDDS())  return Vst2::kSpeakerArr70Cine;
-        else if (channels == AudioChannelSet::create7point1())      return Vst2::kSpeakerArr71Music;
-        else if (channels == AudioChannelSet::create7point1SDDS())  return Vst2::kSpeakerArr71Cine;
-        else if (channels == AudioChannelSet::quadraphonic())       return Vst2::kSpeakerArr40Music;
+        if      (channels == AudioChannelSet::disabled())           return Vst2::vstSpeakerConfigTypeEmpty;
+        else if (channels == AudioChannelSet::mono())               return Vst2::vstSpeakerConfigTypeMono;
+        else if (channels == AudioChannelSet::stereo())             return Vst2::vstSpeakerConfigTypeLR;
+        else if (channels == AudioChannelSet::createLCR())          return Vst2::vstSpeakerConfigTypeLRC;
+        else if (channels == AudioChannelSet::createLRS())          return Vst2::vstSpeakerConfigTypeLRS;
+        else if (channels == AudioChannelSet::createLCRS())         return Vst2::vstSpeakerConfigTypeLRCS;
+        else if (channels == AudioChannelSet::create5point0())      return Vst2::vstSpeakerConfigTypeLRCLsRs;
+        else if (channels == AudioChannelSet::create5point1())      return Vst2::vstSpeakerConfigTypeLRCLfeLsRs;
+        else if (channels == AudioChannelSet::create6point0())      return Vst2::vstSpeakerConfigTypeLRCLsRsCs;
+        else if (channels == AudioChannelSet::create6point1())      return Vst2::vstSpeakerConfigTypeLRCLfeLsRsCs;
+        else if (channels == AudioChannelSet::create6point0Music()) return Vst2::vstSpeakerConfigTypeLRLsRsSlSr;
+        else if (channels == AudioChannelSet::create6point1Music()) return Vst2::vstSpeakerConfigTypeLRLfeLsRsSlSr;
+        else if (channels == AudioChannelSet::create7point0())      return Vst2::vstSpeakerConfigTypeLRCLsRsSlSr;
+        else if (channels == AudioChannelSet::create7point0SDDS())  return Vst2::vstSpeakerConfigTypeLRCLsRsLcRc;
+        else if (channels == AudioChannelSet::create7point1())      return Vst2::vstSpeakerConfigTypeLRCLfeLsRsSlSr;
+        else if (channels == AudioChannelSet::create7point1SDDS())  return Vst2::vstSpeakerConfigTypeLRCLfeLsRsLcRc;
+        else if (channels == AudioChannelSet::quadraphonic())       return Vst2::vstSpeakerConfigTypeLRLsRs;
 
         Array<AudioChannelSet::ChannelType> chans (channels.getChannelTypes());
 
         if (channels == AudioChannelSet::disabled())
-            return Vst2::kSpeakerArrEmpty;
+            return Vst2::vstSpeakerConfigTypeEmpty;
 
-        for (const Mapping* m = getMappings(); m->vst2 != Vst2::kSpeakerArrEmpty; ++m)
+        for (const Mapping* m = getMappings(); m->vst2 != Vst2::vstSpeakerConfigTypeEmpty; ++m)
             if (m->matches (chans))
                 return m->vst2;
 
-        return Vst2::kSpeakerArrUserDefined;
+        return Vst2::vstSpeakerConfigTypeUser;
     }
 
     /** Class to hold a speaker configuration */
@@ -142,7 +142,7 @@ struct SpeakerMappings  : private AudioChannelSet // (inheritance only to give e
     {
     public:
         VstSpeakerConfigurationHolder()                                            { clear(); }
-        VstSpeakerConfigurationHolder (const Vst2::VstSpeakerArrangement& vstConfig)   { operator= (vstConfig); }
+        VstSpeakerConfigurationHolder (const Vst2::VstSpeakerConfiguration& vstConfig)   { operator= (vstConfig); }
         VstSpeakerConfigurationHolder (const VstSpeakerConfigurationHolder& other) { operator= (other.get()); }
         VstSpeakerConfigurationHolder (VstSpeakerConfigurationHolder&& other)
             : storage (std::move (other.storage)) { other.clear(); }
@@ -215,36 +215,36 @@ struct SpeakerMappings  : private AudioChannelSet // (inheritance only to give e
     {
         static const Mapping mappings[] =
         {
-            { Vst2::kSpeakerArrMono,           { centre, unknown } },
-            { Vst2::kSpeakerArrStereo,         { left, right, unknown } },
-            { Vst2::kSpeakerArrStereoSurround, { leftSurround, rightSurround, unknown } },
-            { Vst2::kSpeakerArrStereoCenter,   { leftCentre, rightCentre, unknown } },
-            { Vst2::kSpeakerArrStereoSide,     { leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArrStereoCLfe,     { centre, LFE, unknown } },
-            { Vst2::kSpeakerArr30Cine,         { left, right, centre, unknown } },
-            { Vst2::kSpeakerArr30Music,        { left, right, surround, unknown } },
-            { Vst2::kSpeakerArr31Cine,         { left, right, centre, LFE, unknown } },
-            { Vst2::kSpeakerArr31Music,        { left, right, LFE, surround, unknown } },
-            { Vst2::kSpeakerArr40Cine,         { left, right, centre, surround, unknown } },
-            { Vst2::kSpeakerArr40Music,        { left, right, leftSurround, rightSurround, unknown } },
-            { Vst2::kSpeakerArr41Cine,         { left, right, centre, LFE, surround, unknown } },
-            { Vst2::kSpeakerArr41Music,        { left, right, LFE, leftSurround, rightSurround, unknown } },
-            { Vst2::kSpeakerArr50,             { left, right, centre, leftSurround, rightSurround, unknown } },
-            { Vst2::kSpeakerArr51,             { left, right, centre, LFE, leftSurround, rightSurround, unknown } },
-            { Vst2::kSpeakerArr60Cine,         { left, right, centre, leftSurround, rightSurround, surround, unknown } },
-            { Vst2::kSpeakerArr60Music,        { left, right, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr61Cine,         { left, right, centre, LFE, leftSurround, rightSurround, surround, unknown } },
-            { Vst2::kSpeakerArr61Music,        { left, right, LFE, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr70Cine,         { left, right, centre, leftSurround, rightSurround, topFrontLeft, topFrontRight, unknown } },
-            { Vst2::kSpeakerArr70Music,        { left, right, centre, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr71Cine,         { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontRight, unknown } },
-            { Vst2::kSpeakerArr71Music,        { left, right, centre, LFE, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr80Cine,         { left, right, centre, leftSurround, rightSurround, topFrontLeft, topFrontRight, surround, unknown } },
-            { Vst2::kSpeakerArr80Music,        { left, right, centre, leftSurround, rightSurround, surround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr81Cine,  { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontRight, surround, unknown } },
-            { Vst2::kSpeakerArr81Music, { left, right, centre, LFE, leftSurround, rightSurround, surround, leftSurroundRear, rightSurroundRear, unknown } },
-            { Vst2::kSpeakerArr102,     { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontCentre, topFrontRight, topRearLeft, topRearRight, LFE2, unknown } },
-            { Vst2::kSpeakerArrEmpty,          { unknown } }
+            { Vst2::vstSpeakerConfigTypeMono,                          { centre, unknown } },
+            { Vst2::vstSpeakerConfigTypeLR,                            { left, right, unknown } },
+            { Vst2::vstSpeakerConfigTypeLsRs,                          { leftSurround, rightSurround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLcRc,                          { leftCentre, rightCentre, unknown } },
+            { Vst2::vstSpeakerConfigTypeSlSr,                          { leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeCLfe,                          { centre, LFE, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRC,                           { left, right, centre, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRS,                           { left, right, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfe,                        { left, right, centre, LFE, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRLfeS,                        { left, right, LFE, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCS,                          { left, right, centre, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRLsRs,                        { left, right, leftSurround, rightSurround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeS,                       { left, right, centre, LFE, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRLfeLsRs,                     { left, right, LFE, leftSurround, rightSurround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRs,                       { left, right, centre, leftSurround, rightSurround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRs,                    { left, right, centre, LFE, leftSurround, rightSurround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRsCs,                     { left, right, centre, leftSurround, rightSurround, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRLsRsSlSr,                    { left, right, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsCs,                  { left, right, centre, LFE, leftSurround, rightSurround, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRLfeLsRsSlSr,                 { left, right, LFE, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRsLcRc,                   { left, right, centre, leftSurround, rightSurround, topFrontLeft, topFrontRight, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRsSlSr,                   { left, right, centre, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsLcRc,                { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontRight, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsSlSr,                { left, right, centre, LFE, leftSurround, rightSurround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRsLcRcCs,                 { left, right, centre, leftSurround, rightSurround, topFrontLeft, topFrontRight, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLsRsCsSlSr,                 { left, right, centre, leftSurround, rightSurround, surround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsLcRcCs,              { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontRight, surround, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsCsSlSr,              { left, right, centre, LFE, leftSurround, rightSurround, surround, leftSurroundRear, rightSurroundRear, unknown } },
+            { Vst2::vstSpeakerConfigTypeLRCLfeLsRsTflTfcTfrTrlTrrLfe2, { left, right, centre, LFE, leftSurround, rightSurround, topFrontLeft, topFrontCentre, topFrontRight, topRearLeft, topRearRight, LFE2, unknown } },
+            { Vst2::vstSpeakerConfigTypeEmpty,                         { unknown } }
         };
 
         return mappings;
@@ -254,25 +254,25 @@ struct SpeakerMappings  : private AudioChannelSet // (inheritance only to give e
     {
         switch (type)
         {
-            case AudioChannelSet::left:              return Vst2::kSpeakerL;
-            case AudioChannelSet::right:             return Vst2::kSpeakerR;
-            case AudioChannelSet::centre:            return Vst2::kSpeakerC;
-            case AudioChannelSet::LFE:               return Vst2::kSpeakerLfe;
-            case AudioChannelSet::leftSurround:      return Vst2::kSpeakerLs;
-            case AudioChannelSet::rightSurround:     return Vst2::kSpeakerRs;
-            case AudioChannelSet::leftCentre:        return Vst2::kSpeakerLc;
-            case AudioChannelSet::rightCentre:       return Vst2::kSpeakerRc;
-            case AudioChannelSet::surround:          return Vst2::kSpeakerS;
-            case AudioChannelSet::leftSurroundRear:  return Vst2::kSpeakerSl;
-            case AudioChannelSet::rightSurroundRear: return Vst2::kSpeakerSr;
-            case AudioChannelSet::topMiddle:         return Vst2::kSpeakerTm;
-            case AudioChannelSet::topFrontLeft:      return Vst2::kSpeakerTfl;
-            case AudioChannelSet::topFrontCentre:    return Vst2::kSpeakerTfc;
-            case AudioChannelSet::topFrontRight:     return Vst2::kSpeakerTfr;
-            case AudioChannelSet::topRearLeft:       return Vst2::kSpeakerTrl;
-            case AudioChannelSet::topRearCentre:     return Vst2::kSpeakerTrc;
-            case AudioChannelSet::topRearRight:      return Vst2::kSpeakerTrr;
-            case AudioChannelSet::LFE2:              return Vst2::kSpeakerLfe2;
+            case AudioChannelSet::left:              return Vst2::vstIndividualSpeakerTypeLeft;
+            case AudioChannelSet::right:             return Vst2::vstIndividualSpeakerTypeRight;
+            case AudioChannelSet::centre:            return Vst2::vstIndividualSpeakerTypeCentre;
+            case AudioChannelSet::LFE:               return Vst2::vstIndividualSpeakerTypeLFE;
+            case AudioChannelSet::leftSurround:      return Vst2::vstIndividualSpeakerTypeLeftSurround;
+            case AudioChannelSet::rightSurround:     return Vst2::vstIndividualSpeakerTypeRightSurround;
+            case AudioChannelSet::leftCentre:        return Vst2::vstIndividualSpeakerTypeLeftCentre;
+            case AudioChannelSet::rightCentre:       return Vst2::vstIndividualSpeakerTypeRightCentre;
+            case AudioChannelSet::surround:          return Vst2::vstIndividualSpeakerTypeSurround;
+            case AudioChannelSet::leftSurroundRear:  return Vst2::vstIndividualSpeakerTypeLeftRearSurround;
+            case AudioChannelSet::rightSurroundRear: return Vst2::vstIndividualSpeakerTypeRightRearSurround;
+            case AudioChannelSet::topMiddle:         return Vst2::vstIndividualSpeakerTypeTopMiddle;
+            case AudioChannelSet::topFrontLeft:      return Vst2::vstIndividualSpeakerTypeTopFrontLeft;
+            case AudioChannelSet::topFrontCentre:    return Vst2::vstIndividualSpeakerTypeTopFrontCentre;
+            case AudioChannelSet::topFrontRight:     return Vst2::vstIndividualSpeakerTypeTopFrontRight;
+            case AudioChannelSet::topRearLeft:       return Vst2::vstIndividualSpeakerTypeTopRearLeft;
+            case AudioChannelSet::topRearCentre:     return Vst2::vstIndividualSpeakerTypeTopRearCentre;
+            case AudioChannelSet::topRearRight:      return Vst2::vstIndividualSpeakerTypeTopRearRight;
+            case AudioChannelSet::LFE2:              return Vst2::vstIndividualSpeakerTypeLFE2;
             default: break;
         }
 
